name: CI-CD

on:
  push:
    branches:
      - main

env:
  CONTAINER: ${{ github.event.repository.name }}

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 18.x ]

    steps:
      - name: Checkout master
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@master
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: |
          npm install
          npm ci

      - name: Run Eslint
        run: | 
          npm install eslint
          npm run eslint:fix

  build_and_push:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract Docker metadata
        uses: docker/metadata-action@v4
        id: meta
        with:
          images: ${{ secrets.REGISTRY }}/${{ env.CONTAINER }}

      - name: Login to Private Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image to the Private Registry
        uses: docker/build-push-action@v4
        with:
          tags: ${{ secrets.REGISTRY }}/${{ env.CONTAINER }}:latest
          push: ${{ github.event_name != 'pull_request' }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Deploy to Server via SSH action
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          envs: CONTAINER
          script: |
            # Login into Docker Hub
            docker login ${{ secrets.REGISTRY }} -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            
            # Stop running container
            docker stop $(echo $CONTAINER)
            
            # Remove old container
            docker rm $(echo $CONTAINER)
            
            # Remove old image
            docker rmi ${{ secrets.REGISTRY }}/$(echo $CONTAINER)
            
            # Set env variables
            export LOG_LEVEL=${{ secrets.LOG_LEVEL }}
            export MONGO=${{ secrets.MONGO }}
            export NODE_ENV=${{ secrets.NODE_ENV }}
            export PORT=${{ secrets.PORT }}
  
            # Run a new container from a new image
            docker run -e LOG_LEVEL -e MONGO \
            -e NODE_ENV -e PORT -d \
            --restart always --net internal \
            --publish ${{ secrets.PORT }}:${{ secrets.PORT }} \
            --name $(echo $CONTAINER) \
            ${{ secrets.REGISTRY }}/$(echo $CONTAINER):latest
